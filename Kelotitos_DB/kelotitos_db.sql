-- MySQL Script generated by MySQL Workbench
-- Thu May 14 18:11:59 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema snack_db
-- -----------------------------------------------------
-- 
-- 
-- 

-- -----------------------------------------------------
-- Schema snack_db
--
-- 
-- 
-- 
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `snack_db` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `snack_db` ;

-- -----------------------------------------------------
-- Table `snack_db`.`client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `snack_db`.`client` (
  `id_client` INT NOT NULL AUTO_INCREMENT,
  `name_client` VARCHAR(45) NOT NULL,
  `email_client` VARCHAR(45) NOT NULL,
  `tel_client` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_client`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `snack_db`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `snack_db`.`user` (
  `id_user` INT NOT NULL AUTO_INCREMENT,
  `name_user` VARCHAR(45) NOT NULL,
  `account_user` VARCHAR(45) NOT NULL,
  `password_user` VARCHAR(45) NOT NULL,
  `type_user` INT(1) NOT NULL,
  PRIMARY KEY (`id_user`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `snack_db`.`sale`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `snack_db`.`sale` (
  `id_sale` INT NOT NULL AUTO_INCREMENT,
  `datetime_sale` DATETIME NOT NULL,
  `total_sale` DECIMAL(6,2) NOT NULL DEFAULT 0,
  `client_id_client` INT NOT NULL,
  `user_id_user` INT NOT NULL,
  PRIMARY KEY (`id_sale`),
  INDEX `fk_sale_client_idx` (`client_id_client` ASC) VISIBLE,
  INDEX `fk_sale_user1_idx` (`user_id_user` ASC) VISIBLE,
  CONSTRAINT `fk_sale_client`
    FOREIGN KEY (`client_id_client`)
    REFERENCES `snack_db`.`client` (`id_client`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sale_user1`
    FOREIGN KEY (`user_id_user`)
    REFERENCES `snack_db`.`user` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `snack_db`.`provider`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `snack_db`.`provider` (
  `id_prov` INT NOT NULL AUTO_INCREMENT,
  `name_prov` VARCHAR(45) NOT NULL,
  `email_prov` VARCHAR(45) NOT NULL,
  `tel_prov` VARCHAR(45) NOT NULL,
  `location_prov` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_prov`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `snack_db`.`product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `snack_db`.`product` (
  `id_prod` INT NOT NULL AUTO_INCREMENT,
  `name_prod` VARCHAR(45) NOT NULL,
  `des_prod` VARCHAR(45) NOT NULL,
  `price_prod` DECIMAL(6,2) NOT NULL,
  `purchasePrice_prod` DECIMAL(6,2) NOT NULL,
  `stock_prod` INT NOT NULL,
  `provider_id_prov` INT NOT NULL,
  PRIMARY KEY (`id_prod`),
  INDEX `fk_product_provider1_idx` (`provider_id_prov` ASC) VISIBLE,
  CONSTRAINT `fk_product_provider1`
    FOREIGN KEY (`provider_id_prov`)
    REFERENCES `snack_db`.`provider` (`id_prov`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `snack_db`.`sale_has_product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `snack_db`.`sale_has_product` (
  `sale_id_sale` INT NOT NULL,
  `product_id_prod` INT NOT NULL,
  `quantity_prod` INT NOT NULL,
  `subtotal_sale` DECIMAL(5,2) NOT NULL,
  INDEX `fk_sale_has_product_product1_idx` (`product_id_prod` ASC) VISIBLE,
  INDEX `fk_sale_has_product_sale1_idx` (`sale_id_sale` ASC) VISIBLE,
  CONSTRAINT `fk_sale_has_product_sale1`
    FOREIGN KEY (`sale_id_sale`)
    REFERENCES `snack_db`.`sale` (`id_sale`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sale_has_product_product1`
    FOREIGN KEY (`product_id_prod`)
    REFERENCES `snack_db`.`product` (`id_prod`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `snack_db`.`purchase`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `snack_db`.`purchase` (
  `id_pur` INT NOT NULL AUTO_INCREMENT,
  `datetime_pur` DATETIME NOT NULL,
  `total_pur` DECIMAL(6,2) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id_pur`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `snack_db`.`purchase_has_product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `snack_db`.`purchase_has_product` (
  `purchase_id_pur` INT NOT NULL,
  `product_id_prod` INT NOT NULL,
  `quantity_prod` INT NOT NULL,
  `subtotal_purchase` DECIMAL(5,2) NOT NULL,
  INDEX `fk_purchase_has_product_product1_idx` (`product_id_prod` ASC) VISIBLE,
  INDEX `fk_purchase_has_product_purchase1_idx` (`purchase_id_pur` ASC) VISIBLE,
  CONSTRAINT `fk_purchase_has_product_purchase1`
    FOREIGN KEY (`purchase_id_pur`)
    REFERENCES `snack_db`.`purchase` (`id_pur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_purchase_has_product_product1`
    FOREIGN KEY (`product_id_prod`)
    REFERENCES `snack_db`.`product` (`id_prod`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `snack_db`;

DELIMITER $$
USE `snack_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `snack_db`.`sale_has_product_BEFORE_INSERT` BEFORE INSERT ON `sale_has_product` FOR EACH ROW
BEGIN
	IF (new.quantity_prod > 0) THEN
		SET @precio = (SELECT price_prod FROM product WHERE id_prod = new.product_id_prod);
		SET new.subtotal_sale = new.quantity_prod * @precio;
	END IF;
END$$

USE `snack_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `snack_db`.`sale_has_product_AFTER_INSERT` AFTER INSERT ON `sale_has_product` FOR EACH ROW
BEGIN
	IF (new.quantity_prod > 0) THEN
        UPDATE product SET product.stock_prod = product.stock_prod - new.quantity_prod WHERE product.id_prod = new.product_id_prod;
		UPDATE sale SET sale.total_sale = sale.total_sale + new.subtotal_sale WHERE sale.id_sale = new.sale_id_sale;
	END IF;
END$$

USE `snack_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `snack_db`.`purchase_has_product_BEFORE_INSERT` BEFORE INSERT ON `purchase_has_product` FOR EACH ROW
BEGIN
	IF (new.quantity_prod > 0) THEN
		SET @precio = (SELECT purchasePrice_prod FROM product WHERE id_prod = new.product_id_prod);
		SET new.subtotal_purchase = new.quantity_prod * @precio;
	END IF;
END$$

USE `snack_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `snack_db`.`purchase_has_product_AFTER_INSERT` AFTER INSERT ON `purchase_has_product` FOR EACH ROW
BEGIN
	IF (new.quantity_prod > 0) THEN
		UPDATE product SET product.stock_prod = product.stock_prod + new.quantity_prod WHERE id_prod = new.product_id_prod;
		UPDATE purchase SET purchase.total_pur = purchase.total_pur + new.subtotal_purchase WHERE purchase.id_pur = new.purchase_id_pur; 
	END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
